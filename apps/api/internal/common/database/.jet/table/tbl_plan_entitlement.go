//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PlanEntitlementTable = newTblPlanEntitlement("public", "tbl_plan_entitlement", "")

type tblPlanEntitlement struct {
	postgres.Table

	// Columns
	PlanEntitlementID postgres.ColumnString
	Type              postgres.ColumnString
	Quantity          postgres.ColumnInteger
	Restricted        postgres.ColumnBool
	PlanID            postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TblPlanEntitlement struct {
	tblPlanEntitlement

	EXCLUDED tblPlanEntitlement
}

// AS creates new TblPlanEntitlement with assigned alias
func (a TblPlanEntitlement) AS(alias string) *TblPlanEntitlement {
	return newTblPlanEntitlement(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TblPlanEntitlement with assigned schema name
func (a TblPlanEntitlement) FromSchema(schemaName string) *TblPlanEntitlement {
	return newTblPlanEntitlement(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TblPlanEntitlement with assigned table prefix
func (a TblPlanEntitlement) WithPrefix(prefix string) *TblPlanEntitlement {
	return newTblPlanEntitlement(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TblPlanEntitlement with assigned table suffix
func (a TblPlanEntitlement) WithSuffix(suffix string) *TblPlanEntitlement {
	return newTblPlanEntitlement(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTblPlanEntitlement(schemaName, tableName, alias string) *TblPlanEntitlement {
	return &TblPlanEntitlement{
		tblPlanEntitlement: newTblPlanEntitlementImpl(schemaName, tableName, alias),
		EXCLUDED:           newTblPlanEntitlementImpl("", "excluded", ""),
	}
}

func newTblPlanEntitlementImpl(schemaName, tableName, alias string) tblPlanEntitlement {
	var (
		PlanEntitlementIDColumn = postgres.StringColumn("plan_entitlement_id")
		TypeColumn              = postgres.StringColumn("type")
		QuantityColumn          = postgres.IntegerColumn("quantity")
		RestrictedColumn        = postgres.BoolColumn("restricted")
		PlanIDColumn            = postgres.StringColumn("plan_id")
		allColumns              = postgres.ColumnList{PlanEntitlementIDColumn, TypeColumn, QuantityColumn, RestrictedColumn, PlanIDColumn}
		mutableColumns          = postgres.ColumnList{TypeColumn, QuantityColumn, RestrictedColumn, PlanIDColumn}
		defaultColumns          = postgres.ColumnList{}
	)

	return tblPlanEntitlement{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlanEntitlementID: PlanEntitlementIDColumn,
		Type:              TypeColumn,
		Quantity:          QuantityColumn,
		Restricted:        RestrictedColumn,
		PlanID:            PlanIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
