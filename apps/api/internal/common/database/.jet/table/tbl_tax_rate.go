//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TaxRateTable = newTblTaxRate("public", "tbl_tax_rate", "")

type tblTaxRate struct {
	postgres.Table

	// Columns
	CountryCode     postgres.ColumnString
	PostalCode      postgres.ColumnString
	TaxPercentage   postgres.ColumnString
	StripeTaxRateID postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TblTaxRate struct {
	tblTaxRate

	EXCLUDED tblTaxRate
}

// AS creates new TblTaxRate with assigned alias
func (a TblTaxRate) AS(alias string) *TblTaxRate {
	return newTblTaxRate(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TblTaxRate with assigned schema name
func (a TblTaxRate) FromSchema(schemaName string) *TblTaxRate {
	return newTblTaxRate(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TblTaxRate with assigned table prefix
func (a TblTaxRate) WithPrefix(prefix string) *TblTaxRate {
	return newTblTaxRate(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TblTaxRate with assigned table suffix
func (a TblTaxRate) WithSuffix(suffix string) *TblTaxRate {
	return newTblTaxRate(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTblTaxRate(schemaName, tableName, alias string) *TblTaxRate {
	return &TblTaxRate{
		tblTaxRate: newTblTaxRateImpl(schemaName, tableName, alias),
		EXCLUDED:   newTblTaxRateImpl("", "excluded", ""),
	}
}

func newTblTaxRateImpl(schemaName, tableName, alias string) tblTaxRate {
	var (
		CountryCodeColumn     = postgres.StringColumn("country_code")
		PostalCodeColumn      = postgres.StringColumn("postal_code")
		TaxPercentageColumn   = postgres.StringColumn("tax_percentage")
		StripeTaxRateIDColumn = postgres.StringColumn("stripe_tax_rate_id")
		allColumns            = postgres.ColumnList{CountryCodeColumn, PostalCodeColumn, TaxPercentageColumn, StripeTaxRateIDColumn}
		mutableColumns        = postgres.ColumnList{TaxPercentageColumn, StripeTaxRateIDColumn}
		defaultColumns        = postgres.ColumnList{PostalCodeColumn}
	)

	return tblTaxRate{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		CountryCode:     CountryCodeColumn,
		PostalCode:      PostalCodeColumn,
		TaxPercentage:   TaxPercentageColumn,
		StripeTaxRateID: StripeTaxRateIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
