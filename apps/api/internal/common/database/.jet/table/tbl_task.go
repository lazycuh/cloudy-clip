//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var TaskTable = newTblTask("public", "tbl_task", "")

type tblTask struct {
	postgres.Table

	// Columns
	TaskID    postgres.ColumnString
	Type      postgres.ColumnString
	Status    postgres.ColumnInteger
	UserID    postgres.ColumnString
	UpdatedAt postgres.ColumnTimestampz
	Comment   postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TblTask struct {
	tblTask

	EXCLUDED tblTask
}

// AS creates new TblTask with assigned alias
func (a TblTask) AS(alias string) *TblTask {
	return newTblTask(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TblTask with assigned schema name
func (a TblTask) FromSchema(schemaName string) *TblTask {
	return newTblTask(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TblTask with assigned table prefix
func (a TblTask) WithPrefix(prefix string) *TblTask {
	return newTblTask(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TblTask with assigned table suffix
func (a TblTask) WithSuffix(suffix string) *TblTask {
	return newTblTask(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTblTask(schemaName, tableName, alias string) *TblTask {
	return &TblTask{
		tblTask:  newTblTaskImpl(schemaName, tableName, alias),
		EXCLUDED: newTblTaskImpl("", "excluded", ""),
	}
}

func newTblTaskImpl(schemaName, tableName, alias string) tblTask {
	var (
		TaskIDColumn    = postgres.StringColumn("task_id")
		TypeColumn      = postgres.StringColumn("type")
		StatusColumn    = postgres.IntegerColumn("status")
		UserIDColumn    = postgres.StringColumn("user_id")
		UpdatedAtColumn = postgres.TimestampzColumn("updated_at")
		CommentColumn   = postgres.StringColumn("comment")
		allColumns      = postgres.ColumnList{TaskIDColumn, TypeColumn, StatusColumn, UserIDColumn, UpdatedAtColumn, CommentColumn}
		mutableColumns  = postgres.ColumnList{TypeColumn, StatusColumn, UserIDColumn, UpdatedAtColumn, CommentColumn}
		defaultColumns  = postgres.ColumnList{}
	)

	return tblTask{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		TaskID:    TaskIDColumn,
		Type:      TypeColumn,
		Status:    StatusColumn,
		UserID:    UserIDColumn,
		UpdatedAt: UpdatedAtColumn,
		Comment:   CommentColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
