//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var BillingInfoTable = newTblBillingInfo("public", "tbl_billing_info", "")

type tblBillingInfo struct {
	postgres.Table

	// Columns
	UserID               postgres.ColumnString
	BillingCustomerID    postgres.ColumnString
	StripeSubscriptionID postgres.ColumnString
	CountryCode          postgres.ColumnString
	PostalCode           postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TblBillingInfo struct {
	tblBillingInfo

	EXCLUDED tblBillingInfo
}

// AS creates new TblBillingInfo with assigned alias
func (a TblBillingInfo) AS(alias string) *TblBillingInfo {
	return newTblBillingInfo(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TblBillingInfo with assigned schema name
func (a TblBillingInfo) FromSchema(schemaName string) *TblBillingInfo {
	return newTblBillingInfo(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TblBillingInfo with assigned table prefix
func (a TblBillingInfo) WithPrefix(prefix string) *TblBillingInfo {
	return newTblBillingInfo(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TblBillingInfo with assigned table suffix
func (a TblBillingInfo) WithSuffix(suffix string) *TblBillingInfo {
	return newTblBillingInfo(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTblBillingInfo(schemaName, tableName, alias string) *TblBillingInfo {
	return &TblBillingInfo{
		tblBillingInfo: newTblBillingInfoImpl(schemaName, tableName, alias),
		EXCLUDED:       newTblBillingInfoImpl("", "excluded", ""),
	}
}

func newTblBillingInfoImpl(schemaName, tableName, alias string) tblBillingInfo {
	var (
		UserIDColumn               = postgres.StringColumn("user_id")
		BillingCustomerIDColumn    = postgres.StringColumn("billing_customer_id")
		StripeSubscriptionIDColumn = postgres.StringColumn("stripe_subscription_id")
		CountryCodeColumn          = postgres.StringColumn("country_code")
		PostalCodeColumn           = postgres.StringColumn("postal_code")
		allColumns                 = postgres.ColumnList{UserIDColumn, BillingCustomerIDColumn, StripeSubscriptionIDColumn, CountryCodeColumn, PostalCodeColumn}
		mutableColumns             = postgres.ColumnList{BillingCustomerIDColumn, StripeSubscriptionIDColumn, CountryCodeColumn, PostalCodeColumn}
		defaultColumns             = postgres.ColumnList{}
	)

	return tblBillingInfo{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:               UserIDColumn,
		BillingCustomerID:    BillingCustomerIDColumn,
		StripeSubscriptionID: StripeSubscriptionIDColumn,
		CountryCode:          CountryCodeColumn,
		PostalCode:           PostalCodeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
