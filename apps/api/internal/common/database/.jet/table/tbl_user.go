//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var UserTable = newTblUser("public", "tbl_user", "")

type tblUser struct {
	postgres.Table

	// Columns
	UserID         postgres.ColumnString
	Email          postgres.ColumnString
	Password       postgres.ColumnString
	Salt           postgres.ColumnString
	DisplayName    postgres.ColumnString
	Status         postgres.ColumnInteger
	StatusReason   postgres.ColumnInteger
	Provider       postgres.ColumnInteger
	LastLoggedInAt postgres.ColumnTimestampz
	CreatedAt      postgres.ColumnTimestampz
	UpdatedAt      postgres.ColumnTimestampz

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TblUser struct {
	tblUser

	EXCLUDED tblUser
}

// AS creates new TblUser with assigned alias
func (a TblUser) AS(alias string) *TblUser {
	return newTblUser(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TblUser with assigned schema name
func (a TblUser) FromSchema(schemaName string) *TblUser {
	return newTblUser(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TblUser with assigned table prefix
func (a TblUser) WithPrefix(prefix string) *TblUser {
	return newTblUser(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TblUser with assigned table suffix
func (a TblUser) WithSuffix(suffix string) *TblUser {
	return newTblUser(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTblUser(schemaName, tableName, alias string) *TblUser {
	return &TblUser{
		tblUser:  newTblUserImpl(schemaName, tableName, alias),
		EXCLUDED: newTblUserImpl("", "excluded", ""),
	}
}

func newTblUserImpl(schemaName, tableName, alias string) tblUser {
	var (
		UserIDColumn         = postgres.StringColumn("user_id")
		EmailColumn          = postgres.StringColumn("email")
		PasswordColumn       = postgres.StringColumn("password")
		SaltColumn           = postgres.StringColumn("salt")
		DisplayNameColumn    = postgres.StringColumn("display_name")
		StatusColumn         = postgres.IntegerColumn("status")
		StatusReasonColumn   = postgres.IntegerColumn("status_reason")
		ProviderColumn       = postgres.IntegerColumn("provider")
		LastLoggedInAtColumn = postgres.TimestampzColumn("last_logged_in_at")
		CreatedAtColumn      = postgres.TimestampzColumn("created_at")
		UpdatedAtColumn      = postgres.TimestampzColumn("updated_at")
		allColumns           = postgres.ColumnList{UserIDColumn, EmailColumn, PasswordColumn, SaltColumn, DisplayNameColumn, StatusColumn, StatusReasonColumn, ProviderColumn, LastLoggedInAtColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns       = postgres.ColumnList{EmailColumn, PasswordColumn, SaltColumn, DisplayNameColumn, StatusColumn, StatusReasonColumn, ProviderColumn, LastLoggedInAtColumn, CreatedAtColumn, UpdatedAtColumn}
		defaultColumns       = postgres.ColumnList{CreatedAtColumn, UpdatedAtColumn}
	)

	return tblUser{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:         UserIDColumn,
		Email:          EmailColumn,
		Password:       PasswordColumn,
		Salt:           SaltColumn,
		DisplayName:    DisplayNameColumn,
		Status:         StatusColumn,
		StatusReason:   StatusReasonColumn,
		Provider:       ProviderColumn,
		LastLoggedInAt: LastLoggedInAtColumn,
		CreatedAt:      CreatedAtColumn,
		UpdatedAt:      UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
