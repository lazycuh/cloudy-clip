//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/postgres"
)

var PlanOfferingTable = newTblPlanOffering("public", "tbl_plan_offering", "")

type tblPlanOffering struct {
	postgres.Table

	// Columns
	PlanOfferingID  postgres.ColumnString
	Price           postgres.ColumnString
	DiscountedPrice postgres.ColumnString
	RenewedIn       postgres.ColumnString
	PlanID          postgres.ColumnString

	AllColumns     postgres.ColumnList
	MutableColumns postgres.ColumnList
	DefaultColumns postgres.ColumnList
}

type TblPlanOffering struct {
	tblPlanOffering

	EXCLUDED tblPlanOffering
}

// AS creates new TblPlanOffering with assigned alias
func (a TblPlanOffering) AS(alias string) *TblPlanOffering {
	return newTblPlanOffering(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TblPlanOffering with assigned schema name
func (a TblPlanOffering) FromSchema(schemaName string) *TblPlanOffering {
	return newTblPlanOffering(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TblPlanOffering with assigned table prefix
func (a TblPlanOffering) WithPrefix(prefix string) *TblPlanOffering {
	return newTblPlanOffering(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TblPlanOffering with assigned table suffix
func (a TblPlanOffering) WithSuffix(suffix string) *TblPlanOffering {
	return newTblPlanOffering(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTblPlanOffering(schemaName, tableName, alias string) *TblPlanOffering {
	return &TblPlanOffering{
		tblPlanOffering: newTblPlanOfferingImpl(schemaName, tableName, alias),
		EXCLUDED:        newTblPlanOfferingImpl("", "excluded", ""),
	}
}

func newTblPlanOfferingImpl(schemaName, tableName, alias string) tblPlanOffering {
	var (
		PlanOfferingIDColumn  = postgres.StringColumn("plan_offering_id")
		PriceColumn           = postgres.StringColumn("price")
		DiscountedPriceColumn = postgres.StringColumn("discounted_price")
		RenewedInColumn       = postgres.StringColumn("renewed_in")
		PlanIDColumn          = postgres.StringColumn("plan_id")
		allColumns            = postgres.ColumnList{PlanOfferingIDColumn, PriceColumn, DiscountedPriceColumn, RenewedInColumn, PlanIDColumn}
		mutableColumns        = postgres.ColumnList{PriceColumn, DiscountedPriceColumn, RenewedInColumn, PlanIDColumn}
		defaultColumns        = postgres.ColumnList{}
	)

	return tblPlanOffering{
		Table: postgres.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlanOfferingID:  PlanOfferingIDColumn,
		Price:           PriceColumn,
		DiscountedPrice: DiscountedPriceColumn,
		RenewedIn:       RenewedInColumn,
		PlanID:          PlanIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
		DefaultColumns: defaultColumns,
	}
}
